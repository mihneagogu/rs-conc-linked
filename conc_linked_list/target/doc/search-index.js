var searchIndex = JSON.parse('{\
"conc_linked_list":{"doc":"","i":[[5,"main","conc_linked_list","",null,[[]]],[0,"concurrent_linked_list","","",null,null],[3,"ConcurrentLinkedList","conc_linked_list::concurrent_linked_list","Basically a concurrent stack with no pop method and with…",null,null],[12,"node","","",0,null],[3,"Node","","",null,null],[12,"next","","",1,null],[12,"value","","",1,null],[5,"arc_mut_new","","",null,[[],[["arc",3],["mutex",3]]]],[11,"value_as_ref","","",1,[[],["option",4]]],[11,"get_next","","",1,[[],[["arc",3],["mutex",3]]]],[11,"into_items","","",1,[[]]],[11,"new","","Constructs an empty list",0,[[]]],[11,"new_from","","Constructs a list with a single element",0,[[]]],[11,"new_from_two","","Constructor from two values, just for testing purposes",0,[[]]],[11,"remove_one","","Removes which items happens to be at the top of the list…",0,[[],["option",4]]],[11,"push","","Adds the item to the list, but it does not guarantee order…",0,[[]]],[11,"find","","Finds the position of the node that contains \'like\', and…",0,[[]]],[11,"contains","","Checks whether the \'like\' is inside the list, but not…",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"ConcurrentLinkedList"],[3,"Node"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);